import Head from 'next/head';

import { tarzan } from './components/animations/tarzan';

import { feederOptions, FeedersKey } from './hooks/feeders/feeder-options';
import './styles.css';

import { useState } from 'react';
import { slider } from './components/animations/sliders';
import { LinearExample } from './components/examples/linear-example';
import { RandomExample } from './components/examples/random-example';
import { WaveExample } from './components/examples/waver-example';

const anims = {
  slider,
  tarzan,
};

type AnimsKeys = keyof typeof anims;

export default function Home() {
  const [selectedFeeder, setSelectedFeeder] = useState<FeedersKey>('linear');
  const [selectedAnim, setSelectedAnim] = useState<AnimsKeys>('slider');

  return (
    <>
      <Head>
        <title>Magic Box - 3</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="App">
        {(Object.keys(feederOptions) as FeedersKey[]).map((f) => (
          <label key={f}>
            {f}
            <input
              type="radio"
              name="feeders"
              checked={selectedFeeder === f}
              value={f}
              onChange={(e) => {
                setSelectedFeeder(e.target.value as FeedersKey);
              }}
            />
          </label>
        ))}
        <hr />

        {(Object.keys(anims) as AnimsKeys[]).map((a) => (
          <label key={a}>
            {a}
            <input
              type="radio"
              name="anims"
              checked={selectedAnim === a}
              value={a}
              onChange={(e) => {
                setSelectedAnim(e.target.value as AnimsKeys);
              }}
            />
          </label>
        ))}
        <h2>Slider - randomFeeder</h2>
        {selectedFeeder === 'wave' && (
          <WaveExample selectedAnim={anims[selectedAnim]} />
        )}
        {selectedFeeder === 'linear' && (
          <LinearExample selectedAnim={anims[selectedAnim]} />
        )}

        {selectedFeeder === 'random' && (
          <RandomExample selectedAnim={anims[selectedAnim]} />
        )}
      </div>
    </>
  );
}
